import codecs

Import("env")

def strlit(var):
    return "\"%s\"" % var

config_values = {
    "%test_dsn_count%": len(env["test_db_dsns"]),
    "%test_dsns%": ",\n".join(map(strlit, env["test_db_dsns"])),
    "%test_schema_dir%": strlit(env.Dir("#schema").abspath)
}

config_hpp = env.Substfile("config.hpp.in", SUBST_DICT=config_values)
config_cpp = env.Substfile("config.cpp.in", SUBST_DICT=config_values)

env.Depends([config_hpp, config_cpp], env.Value(env["test_db_dsns"]))

sources = Glob("*.cpp")

# remove -pedantic flag if using older g++
cxxver = tuple(map(int, env["CXXVERSION"].split(".")))
if cxxver < (4, 3, 0):
    env["CCFLAGS"].remove("-pedantic")

env.Append(CCFLAGS=["-g"])

confdeps = env.ConfHas("#gtest-confdeps", ["gtest", "gmock", "hlhdf"])

objects = env.SharedObject(sources)
env.Requires(objects, confdeps)

runner = env.Program("#test/runner", objects,
            LIBS=["gtest", "gmock", "brfc", "hlhdf"])

# vim:filetype=python:et:ts=4:sw=4:
