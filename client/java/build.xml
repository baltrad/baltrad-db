<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2010-2011 Estonian Meteorological and Hydrological Institute

This file is part of baltrad-db.

baltrad-db is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

baltrad-db is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with baltrad-db. If not, see <http://www.gnu.org/licenses/>.
-->
<project name="baltrad-bdb-client" default="build" basedir=".">
  <property file="etc/build.properties" />

  <property name="app.name" value="baltrad-bdb-client" />
  <property name="app.version" value="0.1" />
  <property name="app.root.dir" value="${basedir}" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="build.classes.dir" value="${build.dir}/classes" />
  <property name="build.test.dir" value="${build.dir}/test" />
  <property name="build.itest.dir" value="${build.dir}/itest" />
  <property name="build.instrument.dir" value="${build.dir}/instrument" />
  <property name="dist.dir" value="${basedir}/dist" />
  <property name="source.dir" value="${basedir}/src" />
  <property name="lib.dir" value="${basedir}/lib" />
  <property name="examples.dir" value="${basedir}/examples" />
  <property name="compile.debug" value="true" />
  <property name="compile.optimize" value="true" />
  <property name="compile.includeAntRuntime" value="no" />

  <property file="etc/develop.properties" />
  <property name="prefix" value="/usr/local" />

  <property name="itest.bdbserver.properties" value="${basedir}/etc/develop.properties" />
  <property file="${itest.bdbserver.properties}"/>

  <echo level="info"
        message="using ${baltrad.bdb.server.backend.sqla.uri} as the backend for test database" />

  <path id="lib.path">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
      <exclude name="cglib/*.jar"/>
      <exclude name="easymock/*.jar"/>
      <exclude name="junit/*.jar"/>
      <exclude name="objenesis/*.jar"/>
    </fileset>
  </path>

  <path id="test.lib.path">
    <fileset dir="${lib.dir}">
      <include name="cglib/*.jar"/>
      <include name="easymock/*.jar"/>
      <include name="junit/*.jar"/>
      <include name="objenesis/*.jar"/>
    </fileset>
  </path>

  <!-- Generates the deliverables -->
  <target name="build" depends="clean,compile">
    <mkdir dir="${dist.dir}" />
    <jar destfile="${dist.dir}/${app.name}.jar">
      <fileset dir="${build.classes.dir}"/>
    </jar>
  </target>

  <target name="prepare.tests" depends="prepare.test, prepare.itest"/>

  <target name="execute.tests" depends="prepare.tests, execute.test, execute.itest"/>

  <target name="hudson" depends="build, execute.tests"/>

  <target name="hudson-install" depends="hudson,install-files" />

  <target name="install" depends="build, install-files" />

  <target name="install-files">
    <mkdir dir="${prefix}/share/baltrad-bdb/java/" />
    <copy todir="${prefix}/share/baltrad-bdb/java/libs" flatten="true">
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
        <exclude name="ant/*.jar" />
        <exclude name="junit/*.jar"/>
        <exclude name="easymock/*.jar"/>
        <exclude name="objenesis/*.jar"/>
        <exclude name="cglib/*.jar/"/>
      </fileset>
    </copy>
    <copy file="${dist.dir}/${app.name}.jar"
          todir="${prefix}/share/baltrad-bdb/java"/>
  </target>

  <!-- Compile the code -->
  <target name="compile" depends="prepare">
    <mkdir dir="${build.classes.dir}"/>
    <javac srcdir="${source.dir}"
           encoding="utf-8"
           deprecation="on"
           debug="${compile.debug}"
           includeAntRuntime="${compile.includeAntRuntime}"
           optimize="${compile.optimize}"
           destdir="${build.classes.dir}">
      <classpath refid="lib.path"/>
      <compilerarg value="-Xlint"/>
    </javac>
  </target>

  <!-- UNIT TESTS -->
  <target name="test" depends="build,execute.test" />

  <target name="compile.test">
    <mkdir dir="${build.test.dir}"/>
    <javac srcdir="${app.root.dir}/test"
           encoding="utf-8"
           deprecation="on"
           debug="${compile.debug}"
           includeAntRuntime="${compile.includeAntRuntime}"     
           optimize="${compile.optimize}"
           destdir="${build.test.dir}">
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath refid="test.lib.path"/>
    </javac>
    
    <!-- copy any resources -->
    <copy todir="${build.test.dir}">
      <fileset dir="${app.root.dir}/test">
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
        <include name="**/*.groovy"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare.test" depends="compile.test">
    <mkdir dir="${build.test.dir}" />
    <mkdir dir="${dist.dir}/junit-reports" />
  </target> 
  
  <target name="execute.test" depends="prepare.test">
  <mkdir dir="${dist.dir}/junit-reports" />
  <junit dir="${build.test.dir}" showoutput="true" forkmode="perBatch" printsummary="no" >
    <jvmarg line="-Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=512m"/>
    <formatter type="xml"/> 
    <formatter type="brief" usefile="false" if="test.format.brief" />
    <classpath refid="test.lib.path"/>
    <classpath location="${build.classes.dir}"/>
    <classpath refid="lib.path"/>
    <classpath location="${build.test.dir}" />
    <batchtest fork="no" todir="${dist.dir}/junit-reports">
    	<fileset dir="${build.test.dir}" includes="**/*Test.class" />
<!--
        <fileset dir="${build.test.dir}" includes="**/TemplateMetadataNamerTest.class" />
-->    	
    </batchtest>
  </junit>
  </target>
  
  <!-- INTEGRATION TESTS -->
  <target name="itest" depends="build,execute.itest" />

  <target name="compile.itest">
    <mkdir dir="${build.itest.dir}"/>
    <javac srcdir="${app.root.dir}/itest"
           encoding="utf-8"
           deprecation="on"
           debug="${compile.debug}"
           includeAntRuntime="${compile.includeAntRuntime}"     
           optimize="${compile.optimize}"
           destdir="${build.itest.dir}">
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath refid="test.lib.path"/>
    </javac>

    <!-- copy any resources -->
    <copy todir="${build.itest.dir}">
      <fileset dir="${app.root.dir}/itest">
        <include name="**/fixtures/**"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare.itest">
    <mkdir dir="${build.itest.dir}" />
    <mkdir dir="${dist.dir}/junit-reports" />
  </target>
  
  <target name="start-baltrad-bdb-server">
    <!-- find bdb-server executable -->
    <available file="${baltrad.bdb.bin.path}/baltrad-bdb-server"
               property="bdbserver.available"/>
    <fail unless="${bdbserver.available}"
          message="BDB server executable not found in ${baltrad.bdb.bin.path} !" />

    <exec executable="${baltrad.bdb.bin.path}/baltrad-bdb-drop"
          failonerror="true">
      <arg value="--conf=${itest.bdbserver.properties}"/>
    </exec>

    <exec executable="${baltrad.bdb.bin.path}/baltrad-bdb-create"
          failonerror="true">
      <arg value="--conf=${itest.bdbserver.properties}"/>
    </exec>

    <exec executable="${baltrad.bdb.bin.path}/baltrad-bdb-server"
          failonerror="true">
      <arg value="--conf=${itest.bdbserver.properties}"/>
      <arg value="--pidfile=${build.dir}/baltrad-bdb-server.pid"/>
      <arg value="--logfile=${build.dir}/baltrad-bdb-server.log"/>
    </exec>
  	
  	<sleep seconds="2" /> <!-- Dont import sources immediately, let server start -->
  	
    <exec executable="${baltrad.bdb.bin.path}/baltrad-bdb-client"
          failonerror="true">
      <arg value="import_sources"/>
      <arg value="--url=${baltrad.bdb.server.uri}"/>
      <arg value="${basedir}/etc/itest_sources.xml"/>
    </exec>
  </target>

  <target name="stop-baltrad-bdb-server">
    <exec executable="cat" outputproperty="baltrad.bdb.server.pid">
      <arg value="${build.dir}/baltrad-bdb-server.pid"/>
    </exec>
    <exec executable="kill">
      <arg value="${baltrad.bdb.server.pid}"/>
    </exec>
  </target>

  <target name="execute.itest"
          depends="prepare.itest,compile.itest,start-baltrad-bdb-server">
    <junit dir="${build.itest.dir}" showoutput="true" forkmode="perBatch" printsummary="no" >
      <jvmarg line="-Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=512m"/>
      <formatter type="xml"/> 
      <formatter type="brief" usefile="false" if="test.format.brief" />
      <classpath refid="test.lib.path"/>
      <classpath location="${build.classes.dir}"/>
      <classpath refid="lib.path"/>
      <classpath location="${build.itest.dir}" />
      <sysproperty key="baltrad.bdb.server.uri" value="${baltrad.bdb.server.uri}"/>
      <batchtest fork="yes" todir="${dist.dir}/junit-reports">
        <fileset dir="${build.itest.dir}" includes="**/*Test.class" />
      </batchtest>
    </junit>
    <antcall target="stop-baltrad-bdb-server" />
  </target> 

  <!-- clean directories for building -->
  <target name="clean">
    <delete dir="${build.dir}" />
  </target>
  
  <!-- Prepare for compilation and jar-generation, copy files -->
  <target name="prepare">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.classes.dir}" />

    <!-- Copy misc extra files that resides in the src into classes -->
    <copy todir="${build.classes.dir}" preservelastmodified="true">
      <fileset dir="${source.dir}">
        <include name="**/*.properties"/>
        <include name="**/*.handlers"/>
        <include name="**/*.schemas"/>
        <include name="**/*.xml"/>
        <include name="**/*.dtd"/>
        <include name="**/*.xsd"/>
        <include name="**/*.vm"/>
        <include name="**/*.ftl"/>
        <include name="**/*.types"/>
      </fileset>
    </copy>
  </target>
</project>

